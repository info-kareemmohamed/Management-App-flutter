// Mocks generated by Mockito 5.4.4 from annotations
// in ropulva_flutter_task/test/core/repository/task_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ropulva_flutter_task/data/local/local_data_source.dart' as _i3;
import 'package:ropulva_flutter_task/data/remote/remote_data_source.dart'
    as _i6;
import 'package:ropulva_flutter_task/domain/model/task_model.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCollectionReference_0<T extends Object?> extends _i1.SmartFake
    implements _i2.CollectionReference<T> {
  _FakeCollectionReference_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i3.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int?> getLastUpdatedDate() => (super.noSuchMethod(
        Invocation.method(
          #getLastUpdatedDate,
          [],
        ),
        returnValue: _i4.Future<int?>.value(),
      ) as _i4.Future<int?>);

  @override
  _i4.Future<void> upsertTask(
    _i5.TaskModel? task,
    int? lastDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #upsertTask,
          [
            task,
            lastDate,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.TaskModel?> getTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTask,
          [id],
        ),
        returnValue: _i4.Future<_i5.TaskModel?>.value(),
      ) as _i4.Future<_i5.TaskModel?>);

  @override
  _i4.Future<List<_i5.TaskModel>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i5.TaskModel>>.value(<_i5.TaskModel>[]),
      ) as _i4.Future<List<_i5.TaskModel>>);

  @override
  _i4.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> upsertTasksToLocal(
    List<_i5.TaskModel>? tasks,
    int? lastDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #upsertTasksToLocal,
          [
            tasks,
            lastDate,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearTasks() => (super.noSuchMethod(
        Invocation.method(
          #clearTasks,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i6.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CollectionReference<Object?> get userCollection => (super.noSuchMethod(
        Invocation.getter(#userCollection),
        returnValue: _FakeCollectionReference_0<Object?>(
          this,
          Invocation.getter(#userCollection),
        ),
      ) as _i2.CollectionReference<Object?>);

  @override
  _i4.Future<void> upsertTask(
    _i5.TaskModel? task,
    int? lastDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #upsertTask,
          [
            task,
            lastDate,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int?> getLastUpdateDate() => (super.noSuchMethod(
        Invocation.method(
          #getLastUpdateDate,
          [],
        ),
        returnValue: _i4.Future<int?>.value(),
      ) as _i4.Future<int?>);

  @override
  _i4.Future<_i5.TaskModel?> getTaskById(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [taskId],
        ),
        returnValue: _i4.Future<_i5.TaskModel?>.value(),
      ) as _i4.Future<_i5.TaskModel?>);

  @override
  _i4.Future<List<_i5.TaskModel>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i5.TaskModel>>.value(<_i5.TaskModel>[]),
      ) as _i4.Future<List<_i5.TaskModel>>);

  @override
  _i4.Future<void> saveCachedTasksToBackend(
    List<_i5.TaskModel>? cachedTasks,
    int? lastDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCachedTasksToBackend,
          [
            cachedTasks,
            lastDate,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearAllUserData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllUserData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
